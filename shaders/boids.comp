#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_debug_printf : enable

#define WORKGROUP_SIZE 1
layout (local_size_x = 32, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

struct InstanceData
{
    vec3 pos;
    vec3 rot;
    vec3 scale;
    int  tex_idx;
};

layout(set = 0, binding = 0) buffer Transform {
    InstanceData instance_data[];
};

layout(push_constant) uniform Constants{
    float time_in_seconds;
    float deltaTime;
    float size_x;
    float size_y;
    int mouse_x;
    int mouse_y;
    bool mouse_left;
};

float speed = 80;
vec2 velocity;

void main()
{
    if(gl_GlobalInvocationID.x >= size_x)
        return;

    vec3 pos = instance_data[gl_GlobalInvocationID.x].pos;

    vec3 target_direction = normalize(vec3(mouse_x, mouse_y, 0.0) - pos);
    // target_direction.z = 0;

    // velocity.xy += (deltaTime);

    if (mouse_left)
        target_direction *= -1;

    instance_data[gl_GlobalInvocationID.x].pos += (target_direction) * speed * deltaTime ;

    // float t = mod(time_in_seconds, 360);
    pos = instance_data[gl_GlobalInvocationID.x].pos;
    float cosf = dot(target_direction, pos) / (length(target_direction)*length(pos));
    instance_data[gl_GlobalInvocationID.x].rot = vec3(atan(cosf)+90, 0, 0.0);

    // debugPrintfEXT("mouse pos: %d %d\n", mouse_x, mouse_y);
}
